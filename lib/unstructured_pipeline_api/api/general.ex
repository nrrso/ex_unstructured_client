# NOTE: This file is auto generated by OpenAPI Generator 7.3.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule UnstructuredPipelineAPI.Api.General do
  @moduledoc """
  API calls for all endpoints tagged `General`.
  """

  alias UnstructuredPipelineAPI.Connection
  import UnstructuredPipelineAPI.RequestBuilder

  @doc """
  Pipeline 1

  ### Parameters

  - `connection` (UnstructuredPipelineAPI.Connection): Connection to server
  - `files` (String.t): The file to extract
  - `opts` (keyword): Optional parameters
    - `:strategy` (String.t): The strategy to use for partitioning PDF/image. Options are fast, hi_res, auto. Default: auto
    - `:gz_uncompressed_content_type` (String.t): If file is gzipped, use this content type after unzipping
    - `:output_format` (String.t): The format of the response. Supported formats are application/json and text/csv. Default: application/json.
    - `:coordinates` (boolean()): If true, return coordinates for each element. Default: false
    - `:encoding` (String.t): The encoding method used to decode the text input. Default: utf-8
    - `:hi_res_model_name` (String.t): The name of the inference model used when strategy is hi_res
    - `:include_page_breaks` (boolean()): If True, the output will include page breaks if the filetype supports it. Default: false
    - `:languages` ([String.t]): The languages present in the document, for use in partitioning and/or OCR
    - `:pdf_infer_table_structure` (boolean()): If True and strategy=hi_res, any Table Elements extracted from a PDF will include an additional metadata field, 'text_as_html', where the value (string) is a just a transformation of the data into an HTML <table>.
    - `:skip_infer_table_types` ([String.t]): The document types that you want to skip table extraction with. Default: ['pdf', 'jpg', 'png']
    - `:xml_keep_tags` (boolean()): If True, will retain the XML tags in the output. Otherwise it will simply extract the text from within the tags. Only applies to partition_xml.
    - `:chunking_strategy` (String.t): Use one of the supported strategies to chunk the returned elements. Currently supports: by_title
    - `:multipage_sections` (boolean()): If chunking strategy is set, determines if sections can span multiple sections. Default: true
    - `:combine_under_n_chars` (integer()): If chunking strategy is set, combine elements until a section reaches a length of n chars. Default: 500
    - `:new_after_n_chars` (integer()): If chunking strategy is set, cut off new sections after reaching a length of n chars (soft max). Default: 1500
    - `:max_characters` (integer()): If chunking strategy is set, cut off new sections after reaching a length of n chars (hard max). Default: 1500

  ### Returns

  - `{:ok, [%AnyType{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec partition(Tesla.Env.client, String.t, keyword()) :: {:ok, list(any())} | {:ok, UnstructuredPipelineAPI.Model.HttpValidationError1.t} | {:error, Tesla.Env.t}
  def partition(connection, files, opts \\ []) do
    optional_params = %{
      :strategy => :form,
      :gz_uncompressed_content_type => :form,
      :output_format => :form,
      :coordinates => :form,
      :encoding => :form,
      :hi_res_model_name => :form,
      :include_page_breaks => :form,
      :languages => :form,
      :pdf_infer_table_structure => :form,
      :skip_infer_table_types => :form,
      :xml_keep_tags => :form,
      :chunking_strategy => :form,
      :multipage_sections => :form,
      :combine_under_n_chars => :form,
      :new_after_n_chars => :form,
      :max_characters => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/general/v0/general")
      |> add_param(:file, :files, files)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {422, UnstructuredPipelineAPI.Model.HttpValidationError1}
    ])
  end
end
